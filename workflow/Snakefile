#!python3

import pandas as pd
import numpy as np


### --------- Configuration Information ---------- ###
configfile: "config.yaml"


chroms = [f"chr{i}" for i in range(1, 23)]


### --------- Setting up the targets for the workflow -------- ###
TARGETS = []
# seed = 42
# for POP in config["KG_PHASE3_NYGC"]:
# n = config["KG_PHASE3_NYGC"][POP]["n"]
# for c in config["KG_PHASE3_NYGC"][POP]["chroms"]:
# if c == "none":
# pass
# elif c == "all":
# for c_tot in chroms:
# TARGETS.append(
# f"results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{c_tot}.sfs.tsv.gz"
# )
# else:
# TARGETS.append(
# f"results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{c}.sfs.tsv.gz"
#             )

for c in config["GNOMAD_V3_GENOMES"]["chroms"]:
    if c == "none":
        pass
    elif c == "all":
        for c_tot in chroms:
            TARGETS.append(
                f"results/sfs_files/gnomAD_v3/geosfs.gnomad_r3.1.2.genomes.{c_tot}.v3_expanded.tsv.gz"
            )
    else:
        TARGETS.append(
            f"results/sfs_files/gnomAD_v3/geosfs.gnomad_r3.1.2.genomes.{c}.v3_expanded.tsv.gz"
        )


# Just get the unique targets for the pipeline if possible.
TARGETS = np.unique(TARGETS).tolist()


rule all:
    input:
        TARGETS,


# -------------- Part 1: subpop-specific SFS from 1000 Genomes ----------------- #
rule global_superpops:
    input:
        pop_tsv="data/sample_1kg_metadata.tsv",
    output:
        txt="results/population_files/kg_nygc_phase3/{POP}.{n}.{seed}.txt",
    wildcard_constraints:
        n="\d+",
        seed="\d+",
    params:
        poplist=lambda wildcards: config["KG_PHASE3_NYGC"][wildcards.POP]["pops"],
        version=lambda wildcards: config["KG_PHASE3_NYGC"][wildcards.POP]["version"],
    run:
        np.random.seed(int(wildcards.seed))
        sample_df = pd.read_csv(input.pop_tsv, "\t")
        assert "superpopulation" in sample_df.columns
        assert "population" in sample_df.columns
        assert "KGP_sample_id" in sample_df.columns
        nsamp = int(int(wildcards.n) / len(params.poplist))
        samples = []
        for p in params.poplist:
            if params.version == "superpops":
                indivs = sample_df[sample_df.superpopulation == p].KGP_sample_id.values
            else:
                indivs = sample_df[sample_df.population == p].KGP_sample_id.values
            for s in np.random.choice(indivs, size=nsamp, replace=False):
                samples.append(s)
        with open(output.txt, "w+") as out:
            for s in samples:
                out.write(s + "\n")


rule subset_1kg_vcf:
    """Subset and drop the sites of the VCF from the 1KG to reduce space and save annotations."""
    input:
        vcf="/scratch4/rmccoy22/sharedData/populationDatasets/1KGP_NYGC/GRCh38_phased_vcfs/1kGP_high_coverage_Illumina.{chrom}.filtered.SNV_INDEL_SV_phased_panel.vcf.gz",
        tbi="/scratch4/rmccoy22/sharedData/populationDatasets/1KGP_NYGC/GRCh38_phased_vcfs/1kGP_high_coverage_Illumina.{chrom}.filtered.SNV_INDEL_SV_phased_panel.vcf.gz.tbi",
        popfile="results/population_files/kg_nygc_phase3/{POP}.{n}.{seed}.txt",
    output:
        vcfgz=temp(
            "results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{chrom}.sfs.vcf.gz"
        ),
        vcfgz_tbi=temp(
            "results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{chrom}.sfs.vcf.gz.tbi"
        ),
    threads: 8
    shell:
        "bcftools view -S {input.popfile} -c 1 -v snps -G {input.vcf} --threads {threads} | bgzip -@{threads} > {output.vcfgz}; tabix -f {output.vcfgz}"


rule annotate_1kg_vcf:
    input:
        vcfgz="results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{chrom}.sfs.vcf.gz",
        vcfgz_tbi="results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{chrom}.sfs.vcf.gz.tbi",
    output:
        anno_vcfgz="results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{chrom}.sfs.anno.vcf.gz",
        anno_vcfgz_tbi="results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{chrom}.sfs.anno.vcf.gz.tbi",
    shell:
        "snpEff hg38 {input.vcfgz} | bgzip -@{threads} > {output.anno_vcfgz}; tabix {output.anno_vcfgz}"


rule extract_1kg_sfs:
    """Extract the SFS."""
    input:
        anno_vcfgz="results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{chrom}.sfs.anno.vcf.gz",
    output:
        "results/sfs_files/kg_nygc_phase3/{POP}.{n}.{seed}.{chrom}.sfs.tsv.gz",
    shell:
        'bcftools query -f "%CHROM\t%POS\t%ID\t%AN\t%AC\t%ANN\n" {input.anno_vcfgz} | awk \'{{split($6, info, "|"); OFS="\t"; print $1, $2, $3, $4, $5, info[2], info[3]}}\' | gzip > {output}'


# ----------- 2. Annotated SFS from GnomAD v3 Genomes across multiple populations ------------------ #
rule extract_sfs_gnomAD_v3:
    """Extract the pop-specific AF from GnomAD v3 Genome Data with annotations."""
    output:
        tsv="results/sfs_files/gnomAD_v3/geosfs.gnomad_r3.1.2.genomes.{chrom}.v3_expanded.tsv.gz",
    wildcard_constraints:
        chrom="chr\d+",
    shell:
        """
        bcftools query -i \"TYPE=\'snp\' && AC > 0\" -f \"%CHROM\t%POS\t%ID\t%REF\t%ALT\t%gnomad_AC_nfe\t%gnomad_AN_nfe\t%gnomad_AC_eas\t%gnomad_AN_eas\t%gnomad_AC_sas\t%gnomad_AN_sas\t%gnomad_AC_mid\t%gnomad_AN_mid\t%gnomad_AC_oth\t%gnomad_AN_oth\t%vep\n\" https://gnomad-public-us-east-1.s3.amazonaws.com/release/3.1.2/vcf/genomes/gnomad.genomes.v3.1.2.hgdp_tgp.{wildcards.chrom}.vcf.bgz | awk \'BEGIN{{OFS=\"\t\"; print \"CHROM\tPOS\tID\tREF\tALT\tAC_NFE\tAN_NFE\tAC_EAS\tAN_EAS\tAC_SAS\tAN_SAS\tAC_MID\tAN_MID\tAC_OTH\tAN_OTH\tAnnot\tEffect\"}};  {{split($16, vep, \"|\"); $16=vep[2]; $17=vep[3]; print $0}}\' | bgzip > {output.tsv}
        """


# ----------- 3. Using panUKBB variant listings and frequencies -------------- #
