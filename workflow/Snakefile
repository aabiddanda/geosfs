#!python3

import pandas as pd
import numpy as np


### --------- Configuration Information ---------- ###
configfile: "config.yaml"


chroms = [f"chr{i}" for i in range(1, 23)]


### --------- Setting up the targets for the workflow -------- ###
seed = 42
TARGETS = []
for c in config["GNOMAD_V3_GENOMES"]["chroms"]:
    if c == "none":
        pass
    elif c == "all":
        for c_tot in chroms:
            for scenario in config["GNOMAD_V3_GENOMES"]["scenarios"]:
                TARGETS.append(
                    f"results/subsample_sfs/{scenario}/gnomAD_v3.{c_tot}.seed{seed}.sfs.tsv.gz"
                )
    else:
        for scenario in config["GNOMAD_V3_GENOMES"]["scenarios"]:
            TARGETS.append(
                f"results/subsample_sfs/{scenario}/gnomAD_v3.{c}.seed{seed}.sfs.tsv.gz"
            )


# Just get the unique targets for the pipeline if possible.
TARGETS = np.unique(TARGETS).tolist()


rule all:
    input:
        TARGETS,


# ----------- 3. Annotated SFS from GnomAD v3 Genomes across multiple populations ------------------ #
rule extract_sfs_gnomAD_v3:
    """Extract the pop-specific AF from GnomAD v3 Genome Data with annotations."""
    output:
        tsv="results/sfs_files/gnomAD_v3/geosfs.gnomad_r3.1.2.genomes.{chrom}.v3_expanded.tsv.gz",
    wildcard_constraints:
        chrom="chr\d+",
    shell:
        """
        bcftools query -i \"TYPE=\'snp\' && AC > 0\" -f \"%CHROM\t%POS\t%ID\t%REF\t%ALT\t%gnomad_AC_nfe\t%gnomad_AN_nfe\t%gnomad_AC_eas\t%gnomad_AN_eas\t%gnomad_AC_sas\t%gnomad_AN_sas\t%gnomad_AC_mid\t%gnomad_AN_mid\t%gnomad_AC_oth\t%gnomad_AN_oth\t%vep\n\" https://gnomad-public-us-east-1.s3.amazonaws.com/release/3.1.2/vcf/genomes/gnomad.genomes.v3.1.2.hgdp_tgp.{wildcards.chrom}.vcf.bgz | awk \'BEGIN{{OFS=\"\t\"; print \"CHROM\tPOS\tID\tREF\tALT\tAC_NFE\tAN_NFE\tAC_EAS\tAN_EAS\tAC_SAS\tAN_SAS\tAC_MID\tAN_MID\tAC_OTH\tAN_OTH\tAnnot\tEffect\"}};  {{split($16, vep, \"|\"); $16=vep[2]; $17=vep[3]; print $0}}\' | bgzip > {output.tsv}
        """


rule subsamp_sfs_gnomAD_v3:
    input:
        gnomAD_jsfs="results/sfs_files/gnomAD_v3/geosfs.gnomad_r3.1.2.genomes.{chrom}.v3_expanded.tsv.gz",
    output:
        subsamp_sfs_tsv="results/subsample_sfs/{scenario}/gnomAD_v3.{chrom}.seed{seed}.sfs.tsv.gz",
    params:
        poplist=["NFE", "EAS", "SAS", "MID", "OTH"],
        props=lambda wildcards: np.array(
            [
                float(x)
                for x in config["GNOMAD_V3_GENOMES"]["scenarios"][wildcards.scenario][
                    "props"
                ].split(",")
            ]
        ),
        n=lambda wildcards: int(
            config["GNOMAD_V3_GENOMES"]["scenarios"][wildcards.scenario]["n"]
        ),
    script:
        "scripts/subsample_afs.py"


# ----------- 3. Using panUKBB variant listings and frequencies -------------- #
