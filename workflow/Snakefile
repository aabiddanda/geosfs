#!python3

import pandas as pd
import numpy as np
import itertools


### --------- Configuration Information ---------- ###
configfile: "config.yaml"


chroms = [f"chr{i}" for i in range(1, 23)]


### --------- Setting up the targets for the workflow -------- ###
seeds = range(1, 21)
TARGETS = []
scenarios = config["GNOMAD_V3_GENOMES"]["scenarios"]
for seed in seeds:
    for s1, s2 in list(itertools.combinations(scenarios, 2)):
        TARGETS.append(
            f"results/subsample_sfs/merged_total/{s1}.{s2}.gnomAD_v3.autosomes.seed{seed}.sfs.tsv.gz"
        )


# Just get the unique targets for the pipeline if possible.
TARGETS = np.unique(TARGETS).tolist()


rule all:
    input:
        TARGETS,


# ----------- 3. Annotated SFS from GnomAD v3 Genomes across multiple populations ------------------ #
rule extract_sfs_gnomAD_v3:
    """Extract the pop-specific AF from GnomAD v3 Genome Data with annotations."""
    output:
        tsv="results/sfs_files/gnomAD_v3/geosfs.gnomad_r3.1.2.genomes.{chrom}.v3_expanded.tsv.gz",
    wildcard_constraints:
        chrom="chr\d+",
    shell:
        """
        bcftools query -i \"TYPE=\'snp\' && AC > 0\" -f \"%CHROM\t%POS\t%ID\t%REF\t%ALT\t%gnomad_AC_nfe\t%gnomad_AN_nfe\t%gnomad_AC_eas\t%gnomad_AN_eas\t%gnomad_AC_sas\t%gnomad_AN_sas\t%gnomad_AC_mid\t%gnomad_AN_mid\t%gnomad_AC_oth\t%gnomad_AN_oth\t%vep\n\" https://gnomad-public-us-east-1.s3.amazonaws.com/release/3.1.2/vcf/genomes/gnomad.genomes.v3.1.2.hgdp_tgp.{wildcards.chrom}.vcf.bgz | awk \'BEGIN{{OFS=\"\t\"; print \"CHROM\tPOS\tID\tREF\tALT\tAC_NFE\tAN_NFE\tAC_EAS\tAN_EAS\tAC_SAS\tAN_SAS\tAC_MID\tAN_MID\tAC_OTH\tAN_OTH\tAnnot\tEffect\"}};  {{split($16, vep, \"|\"); $16=vep[2]; $17=vep[3]; print $0}}\' | bgzip > {output.tsv}
        """


rule subsamp_sfs_gnomAD_v3:
    input:
        gnomAD_jsfs="results/sfs_files/gnomAD_v3/geosfs.gnomad_r3.1.2.genomes.{chrom}.v3_expanded.tsv.gz",
    output:
        subsamp_sfs_tsv=temp(
            "results/subsample_sfs/{scenario}/gnomAD_v3.{chrom}.seed{seed}.sfs.tsv.gz"
        ),
    params:
        poplist=["NFE", "EAS", "SAS", "MID", "OTH"],
        props=lambda wildcards: np.array(
            [
                float(x)
                for x in config["GNOMAD_V3_GENOMES"]["scenarios"][wildcards.scenario][
                    "props"
                ].split(",")
            ]
        ),
        n=lambda wildcards: int(
            config["GNOMAD_V3_GENOMES"]["scenarios"][wildcards.scenario]["n"]
        ),
    script:
        "scripts/subsample_afs.py"


rule joint_sfs_filt:
    input:
        subsamp1_sfs_tsv="results/subsample_sfs/{scenario1}/gnomAD_v3.{chrom}.seed{seed}.sfs.tsv.gz",
        subsamp2_sfs_tsv="results/subsample_sfs/{scenario2}/gnomAD_v3.{chrom}.seed{seed}.sfs.tsv.gz",
    output:
        merged_tsv=temp(
            "results/subsample_sfs/merged/{scenario1}.{scenario2}.gnomAD_v3.{chrom}.seed{seed}.sfs.tsv.gz"
        ),
    run:
        sfs1_df = pd.read_csv(input.subsamp1_sfs_tsv, sep="\t")
        sfs2_df = pd.read_csv(input.subsamp2_sfs_tsv, sep="\t")
        for a in ["AC", "AF", "N"]:
            assert a in sfs1_df.columns
            assert a in sfs2_df.columns
        sfs1_df = sfs1_df.rename(
            columns={
                "AC": f"AC_{wildcards['scenario1']}",
                "AF": f"AF_{wildcards['scenario1']}",
                "N": f"N_{wildcards['scenario1']}",
            }
        )
        sfs2_df = sfs2_df.rename(
            columns={
                "AC": f"AC_{wildcards['scenario2']}",
                "AF": f"AF_{wildcards['scenario2']}",
                "N": f"N_{wildcards['scenario2']}",
            }
        )
        merged_sfs_df = sfs1_df.merge(sfs2_df)
        merged_sfs_df = merged_sfs_df[
            (merged_sfs_df[f"AC_{wildcards['scenario1']}"] > 0)
            | (merged_sfs_df[f"AC_{wildcards['scenario2']}"] > 0)
        ]
        merged_sfs_df.to_csv(output.merged_tsv, sep="\t", index=None)


rule concat_joint_sfs:
    input:
        expand(
            "results/subsample_sfs/merged/{{scenario1}}.{{scenario2}}.gnomAD_v3.{chrom}.seed{{seed}}.sfs.tsv.gz",
            chrom=chroms,
        ),
    output:
        "results/subsample_sfs/merged_total/{scenario1}.{scenario2}.gnomAD_v3.autosomes.seed{seed}.sfs.tsv.gz",
    shell:
        "zcat {input} | awk 'NR > 1 && /^Annot/ {{ next }} 1' | gzip > {output}"
